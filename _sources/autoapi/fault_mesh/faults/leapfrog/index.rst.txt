fault_mesh.faults.leapfrog
==========================

.. py:module:: fault_mesh.faults.leapfrog

.. autoapi-nested-parse::

   Classes that implement the Leapfrog fault model. Inherit from GenericFault and GenericMultiFault.



Classes
-------

.. autoapisummary::

   fault_mesh.faults.leapfrog.LeapfrogMultiFault
   fault_mesh.faults.leapfrog.LeapfrogFault


Module Contents
---------------

.. py:class:: LeapfrogMultiFault(fault_geodataframe, sort_sr = False, segment_distance_tolerance = 100.0, smoothing_n = None, remove_colons = True, dip_choice = 'pref', trimming_gradient = 1.0, epsg = None)

   Bases: :py:obj:`fault_mesh.faults.generic.GenericMultiFault`


   Class to hold data for multiple faults, read in from shapefile (and hopefully also tsurfaces)


   .. py:method:: find_connections(verbose = True)

      Find all connections between faults in the fault list using networkx
      :param verbose: print out information about individual connections
      :return:



.. py:class:: LeapfrogFault(parent_multifault = None, smoothing = 5, trimming_gradient = 1.0, segment_distance_tolerance = 100.0, parent_connected=None)

   Bases: :py:obj:`fault_mesh.faults.generic.GenericFault`


   Represents either a whole fault (for simple faults) or one segment. Behaviours is slightly


   .. py:property:: is_segment

      Records whether instance is a segment of a larger multi-segment fault like the Alpine Fault.
      :return:


   .. py:property:: smoothing

      n value to use in Chaikin's corner-cutting algorithm.
      :return:


   .. py:property:: trimming_gradient

      Factor that controls how much the ends of segment contours of a multi-segment fault are
      shortened to allow
      :return:


   .. py:property:: parent

      Return LeapfrogMultiFault instance that this fault is part of.
      :return:


   .. py:method:: depth_contour(depth, smoothing = True, km=False)

      Generate contour of fault surface at depth below surface
      :param depth: In metres, upwards is positive
      :param smoothing: N for use with Chaikin's corner cutting
      :param km: If True, divide depth by 1000
      :return: LineString or MultiLineString representing contour



   .. py:method:: extend_footprint(end_i, other_end, other_segment, deepest_contour_depth = 30000.0, search_line_length = 150000.0, buffer_size = 5000.0, fall_back_distance = 40.3)

      :param end_i: End to extend
      :param other_end: Other end of segment
      :param other_segment: Other
      :param deepest_contour_depth:
      :param search_line_length:
      :param buffer_size:
      :param fall_back_distance:
      :return:



