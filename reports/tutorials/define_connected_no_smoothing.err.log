Traceback (most recent call last):
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Import modules 
from fault_mesh.faults.leapfrog import LeapfrogMultiFault
import os
import numpy as np
import geopandas as gpd

# Set coordinate system (optional) EPSG code
# If not desired, set to None
epsg = 2193
# Read in fault data from shapefile
fault_data = LeapfrogMultiFault.from_nz_cfm_shp("tutorial_gis/cfm_gt_1_5.gpkg", remove_colons=True, epsg=epsg, smoothing_n=None)

# Alternative for full CFM:
# fault_data = LeapfrogMultiFault.from_nz_cfm_shp("../gis/NZ_CFM_v1_0_shapefile/NZ_CFM_v1_0.shp", remove_colons=True,
#                                                  exclude_aus=False, exclude_zero=False, exclude_region_min_sr=0.0)

# Alternative for different dip:
# fault_data = LeapfrogMultiFault.from_nz_cfm_shp("../gis/NZ_CFM_v1_0_shapefile/NZ_CFM_v1_0.shp", remove_colons=True,
#                                                  exclude_aus=False, exclude_zero=False, exclude_region_min_sr=0.0, dip)
------------------


[31m---------------------------------------------------------------------------[39m
[31mAssertionError[39m                            Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 11[39m
[32m      9[39m epsg = [32m2193[39m
[32m     10[39m [38;5;66;03m# Read in fault data from shapefile[39;00m
[32m---> [39m[32m11[39m fault_data = [43mLeapfrogMultiFault[49m[43m.[49m[43mfrom_nz_cfm_shp[49m[43m([49m[33;43m"[39;49m[33;43mtutorial_gis/cfm_gt_1_5.gpkg[39;49m[33;43m"[39;49m[43m,[49m[43m [49m[43mremove_colons[49m[43m=[49m[38;5;28;43;01mTrue[39;49;00m[43m,[49m[43m [49m[43mepsg[49m[43m=[49m[43mepsg[49m[43m,[49m[43m [49m[43msmoothing_n[49m[43m=[49m[38;5;28;43;01mNone[39;49;00m[43m)[49m
[32m     13[39m [38;5;66;03m# Alternative for full CFM:[39;00m
[32m     14[39m [38;5;66;03m# fault_data = LeapfrogMultiFault.from_nz_cfm_shp("../gis/NZ_CFM_v1_0_shapefile/NZ_CFM_v1_0.shp", remove_colons=True,[39;00m
[32m     15[39m [38;5;66;03m#                                                  exclude_aus=False, exclude_zero=False, exclude_region_min_sr=0.0)[39;00m
[32m   (...)[39m[32m     18[39m [38;5;66;03m# fault_data = LeapfrogMultiFault.from_nz_cfm_shp("../gis/NZ_CFM_v1_0_shapefile/NZ_CFM_v1_0.shp", remove_colons=True,[39;00m
[32m     19[39m [38;5;66;03m#                                                  exclude_aus=False, exclude_zero=False, exclude_region_min_sr=0.0, dip)[39;00m

[36mFile [39m[32m~/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/fault_mesh/faults/leapfrog.py:274[39m, in [36mLeapfrogMultiFault.from_nz_cfm_shp[39m[34m(cls, filename, exclude_region_polygons, depth_type, exclude_region_min_sr, include_names, exclude_aus, exclude_zero, sort_sr, remove_colons, smoothing_n, dip_choice, epsg, trimming_gradient, dip_multiplier, strike_multiplier, check_optional_fields)[39m
[32m    266[39m [38;5;129m@classmethod[39m
[32m    267[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mfrom_nz_cfm_shp[39m([38;5;28mcls[39m, filename: [38;5;28mstr[39m, exclude_region_polygons: List[Polygon] = [38;5;28;01mNone[39;00m, depth_type: [38;5;28mstr[39m = [33m"[39m[33mD90[39m[33m"[39m,
[32m    268[39m                     exclude_region_min_sr: [38;5;28mfloat[39m = [32m1.8[39m, include_names: [38;5;28mlist[39m = [38;5;28;01mNone[39;00m, exclude_aus: [38;5;28mbool[39m = [38;5;28;01mTrue[39;00m,
[32m   (...)[39m[32m    271[39m                     trimming_gradient: [38;5;28mfloat[39m = [32m1.[39m, dip_multiplier: [38;5;28mfloat[39m = [32m1.[39m, strike_multiplier: [38;5;28mfloat[39m = [32m0.5[39m,
[32m    272[39m                     check_optional_fields: [38;5;28mbool[39m = [38;5;28;01mTrue[39;00m):
[32m--> [39m[32m274[39m     trimmed_fault_gdf = [38;5;28;43mcls[39;49m[43m.[49m[43mgdf_from_nz_cfm_shp[49m[43m([49m[43mfilename[49m[43m=[49m[43mfilename[49m[43m,[49m[43m [49m[43mexclude_region_polygons[49m[43m=[49m[43mexclude_region_polygons[49m[43m,[49m
[32m    275[39m [43m                                                [49m[43mdepth_type[49m[43m=[49m[43mdepth_type[49m[43m,[49m[43m [49m[43mexclude_region_min_sr[49m[43m=[49m[43mexclude_region_min_sr[49m[43m,[49m
[32m    276[39m [43m                                                [49m[43minclude_names[49m[43m=[49m[43minclude_names[49m[43m,[49m[43m [49m[43mexclude_aus[49m[43m=[49m[43mexclude_aus[49m[43m,[49m
[32m    277[39m [43m                                                [49m[43mexclude_zero[49m[43m=[49m[43mexclude_zero[49m[43m)[49m
[32m    278[39m     multi_fault = [38;5;28mcls[39m(trimmed_fault_gdf, sort_sr=sort_sr,
[32m    279[39m                       remove_colons=remove_colons, smoothing_n=smoothing_n,
[32m    280[39m                       dip_choice=dip_choice, epsg=epsg, trimming_gradient=trimming_gradient,
[32m    281[39m                       dip_multiplier=dip_multiplier, strike_multiplier=strike_multiplier,
[32m    282[39m                       check_optional_fields=check_optional_fields)
[32m    284[39m     [38;5;28;01mreturn[39;00m multi_fault

[36mFile [39m[32m~/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/fault_mesh/faults/generic.py:270[39m, in [36mGenericMultiFault.gdf_from_nz_cfm_shp[39m[34m(filename, exclude_region_polygons, depth_type, exclude_region_min_sr, include_names, exclude_aus, exclude_zero)[39m
[32m    263[39m [38;5;129m@staticmethod[39m
[32m    264[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mgdf_from_nz_cfm_shp[39m(filename: [38;5;28mstr[39m, exclude_region_polygons: List[Polygon] = [38;5;28;01mNone[39;00m, depth_type: [38;5;28mstr[39m = [38;5;28;01mNone[39;00m,
[32m    265[39m                         exclude_region_min_sr: [38;5;28mfloat[39m = [32m1.8[39m,
[32m    266[39m                         include_names: [38;5;28mlist[39m = [38;5;28;01mNone[39;00m, exclude_aus: [38;5;28mbool[39m = [38;5;28;01mTrue[39;00m, exclude_zero: [38;5;28mbool[39m = [38;5;28;01mTrue[39;00m):
[32m    267[39m [38;5;250m    [39m[33;03m"""[39;00m
[32m    268[39m [33;03m    Read CFM shapefile[39;00m
[32m    269[39m [33;03m    """[39;00m
[32m--> [39m[32m270[39m     [38;5;28;01massert[39;00m os.path.exists(filename)
[32m    271[39m     fault_geodataframe = gpd.GeoDataFrame.from_file(filename)
[32m    273[39m     [38;5;66;03m# If appropriate, clip out data that fall within exclude_regions[39;00m

[31mAssertionError[39m: 

