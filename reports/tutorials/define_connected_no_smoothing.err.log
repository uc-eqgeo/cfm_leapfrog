Traceback (most recent call last):
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/asyncio/base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/runner/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# Import modules 
from fault_mesh.faults.leapfrog import LeapfrogMultiFault
import os
import numpy as np
import geopandas as gpd

# Set coordinate system (optional) EPSG code
# If not desired, set to None
epsg = 2193
# Read in fault data from shapefile
fault_data = LeapfrogMultiFault.from_nz_cfm_shp("tutorial_gis/cfm_gt_1_5.gpkg", remove_colons=True, epsg=epsg, smoothing_n=None)

# Alternative for full CFM:
# fault_data = LeapfrogMultiFault.from_nz_cfm_shp("../gis/NZ_CFM_v1_0_shapefile/NZ_CFM_v1_0.shp", remove_colons=True,
#                                                  exclude_aus=False, exclude_zero=False, exclude_region_min_sr=0.0)

# Alternative for different dip:
# fault_data = LeapfrogMultiFault.from_nz_cfm_shp("../gis/NZ_CFM_v1_0_shapefile/NZ_CFM_v1_0.shp", remove_colons=True,
#                                                  exclude_aus=False, exclude_zero=False, exclude_region_min_sr=0.0, dip)
------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 2[39m
[32m      1[39m [38;5;66;03m# Import modules [39;00m
[32m----> [39m[32m2[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mfault_mesh[39;00m[34;01m.[39;00m[34;01mfaults[39;00m[34;01m.[39;00m[34;01mleapfrog[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m LeapfrogMultiFault
[32m      3[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mos[39;00m
[32m      4[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mnumpy[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mnp[39;00m

[36mFile [39m[32m~/miniconda3/envs/leapfrog-fault-models/lib/python3.12/site-packages/fault_mesh/faults/leapfrog.py:30[39m
[32m     28[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mfault_mesh[39;00m[34;01m.[39;00m[34;01mutilities[39;00m[34;01m.[39;00m[34;01mmeshing[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m triangulate_contours
[32m     29[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mfault_mesh[39;00m[34;01m.[39;00m[34;01mutilities[39;00m[34;01m.[39;00m[34;01msplines[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m spline_fit_contours
[32m---> [39m[32m30[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mfault_mesh[39;00m[34;01m.[39;00m[34;01mutilities[39;00m[34;01m.[39;00m[34;01mopensha[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m fault_trace_xml, fault_polygon_xml
[32m     33[39m [38;5;28;01mclass[39;00m[38;5;250m [39m[34;01mLeapfrogMultiFault[39;00m(GenericMultiFault):
[32m     34[39m     [38;5;28;01mdef[39;00m[38;5;250m [39m[34m__init__[39m([38;5;28mself[39m, fault_geodataframe: gpd.GeoDataFrame, sort_sr: [38;5;28mbool[39m = [38;5;28;01mFalse[39;00m,
[32m     35[39m                  segment_distance_tolerance: [38;5;28mfloat[39m = [32m100.[39m, smoothing_n: [38;5;28mint[39m = [38;5;28;01mNone[39;00m,
[32m     36[39m                  remove_colons: [38;5;28mbool[39m = [38;5;28;01mTrue[39;00m, dip_choice: [38;5;28mstr[39m = [33m"[39m[33mpref[39m[33m"[39m,
[32m     37[39m                  trimming_gradient: [38;5;28mfloat[39m = [32m1.[39m, epsg: [38;5;28mint[39m = [38;5;28;01mNone[39;00m, dip_multiplier: [38;5;28mfloat[39m = [32m1.[39m,
[32m     38[39m                  strike_multiplier: [38;5;28mfloat[39m = [32m0.5[39m, check_optional_fields: [38;5;28mbool[39m = [38;5;28;01mTrue[39;00m):

[31mModuleNotFoundError[39m: No module named 'fault_mesh.utilities.opensha'

